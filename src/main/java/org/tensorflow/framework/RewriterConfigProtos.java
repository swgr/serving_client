// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/protobuf/rewriter_config.proto

package org.tensorflow.framework;

public final class RewriterConfigProtos {
  private RewriterConfigProtos() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_tensorflow_AutoParallelOptions_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_tensorflow_AutoParallelOptions_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_tensorflow_RewriterConfig_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_tensorflow_RewriterConfig_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n.tensorflow/core/protobuf/rewriter_conf" +
      "ig.proto\022\ntensorflow\";\n\023AutoParallelOpti" +
      "ons\022\016\n\006enable\030\001 \001(\010\022\024\n\014num_replicas\030\002 \001(" +
      "\005\"\231\004\n\016RewriterConfig\022\036\n\026optimize_tensor_" +
      "layout\030\001 \001(\010\022;\n\020constant_folding\030\003 \001(\0162!" +
      ".tensorflow.RewriterConfig.Toggle\022B\n\027ari" +
      "thmetic_optimization\030\007 \001(\0162!.tensorflow." +
      "RewriterConfig.Toggle\022\035\n\025disable_model_p" +
      "runing\030\002 \001(\010\022B\n\023memory_optimization\030\004 \001(" +
      "\0162%.tensorflow.RewriterConfig.MemOptType",
      "\0220\n(memory_optimizer_target_node_name_pr" +
      "efix\030\006 \001(\t\0226\n\rauto_parallel\030\005 \001(\0132\037.tens" +
      "orflow.AutoParallelOptions\022\022\n\noptimizers" +
      "\030d \003(\t\"6\n\006Toggle\022\013\n\007DEFAULT\020\000\022\006\n\002ON\020\001\022\007\n" +
      "\003OFF\020\002\022\016\n\nAGGRESSIVE\020\003\"M\n\nMemOptType\022\023\n\017" +
      "DEFAULT_MEM_OPT\020\000\022\016\n\nNO_MEM_OPT\020\001\022\n\n\006MAN" +
      "UAL\020\002\022\016\n\nHEURISTICS\020\003B5\n\030org.tensorflow." +
      "frameworkB\024RewriterConfigProtosP\001\370\001\001b\006pr" +
      "oto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
    internal_static_tensorflow_AutoParallelOptions_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_tensorflow_AutoParallelOptions_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_tensorflow_AutoParallelOptions_descriptor,
        new java.lang.String[] { "Enable", "NumReplicas", });
    internal_static_tensorflow_RewriterConfig_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_tensorflow_RewriterConfig_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_tensorflow_RewriterConfig_descriptor,
        new java.lang.String[] { "OptimizeTensorLayout", "ConstantFolding", "ArithmeticOptimization", "DisableModelPruning", "MemoryOptimization", "MemoryOptimizerTargetNodeNamePrefix", "AutoParallel", "Optimizers", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
